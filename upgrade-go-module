#!/usr/bin/env python3

import argparse
import json
import os
import re
import subprocess
import sys
import tempfile
import time


def main():
    args = parse_args()
    repos = find_git_repos(args.search_root)
    for repo in repos:
        print(f"{BLUE}processing repo {repo}{RESET}")
        try:
            process_repo(repo, args)
        except SkipRepo as e:
            print(f"skipping: {e.args[0]}")
            continue


BLUE = "\033[34m"
RESET = "\033[0m"


def parse_args():
    parser = argparse.ArgumentParser(
        description="""
            Searches for local git repos containing Go modules, updates a
            specified Go module dependency to a particular version, then raises
            a PR with that change.
        """
    )
    parser.add_argument("--module-name", dest="module_name", required=True)
    parser.add_argument("--module-version", dest="module_version", required=True)
    parser.add_argument(
        "--search-root", dest="search_root", default=os.path.abspath(os.curdir)
    )
    parser.add_argument("--target-branch", dest="target_branch")
    parser.add_argument("--reference", dest="reference")
    parser.add_argument("--draft", dest="draft", action="store_true")
    parser.add_argument("--upgrade-all", dest="upgrade_all", action="store_true")
    parser.add_argument(
        "--always-skip-if-no-change",
        dest="always_skip_if_no_change",
        action="store_true",
    )
    return parser.parse_args()


def find_git_repos(root):
    for dirpath, dirnames, filenames in os.walk(root):
        dirnames.sort()
        if ".git" in dirnames:
            dirnames.clear()  # Don't search for nested repos.
            yield dirpath


class SkipRepo(Exception):
    pass


def process_repo(repo, args):
    go_mod = os.path.join(repo, "go.mod")
    if not os.path.isfile(go_mod):
        raise SkipRepo("no go.mod file")

    current_version = dependency_version(go_mod, args.module_name)
    if not current_version:
        raise SkipRepo("dependency absent")

    if current_version == args.module_version:
        raise SkipRepo("already at required version")

    prompt_upgrade_repo(current_version, args)

    with tempfile.TemporaryDirectory(prefix="upgrade-go-module-") as tmp_repo:
        remote_name = get_remote_url(repo)
        remote_url = exec(repo, ["git", "remote", "get-url", remote_name])
        exec(tmp_repo, ["git", "clone", remote_url, tmp_repo])

        # Update current version, in case the freshly cloned repo has a
        # newer version compared to the one we found earlier.
        go_mod = os.path.join(tmp_repo, "go.mod")
        current_version = dependency_version(go_mod, args.module_name)

        epoch = int(time.time())
        branch_name = f"upgrade_{args.module_name}_to_{args.module_version}_{epoch}"
        branch_name = re.sub(r"[^.a-zA-Z0-9]", "_", branch_name)
        exec(tmp_repo, ["git", "checkout", "-b", branch_name])
        exec(tmp_repo, ["go", "get", f"{args.module_name}@{args.module_version}"])
        exec(tmp_repo, ["go", "mod", "tidy"])
        if os.path.isdir(os.path.join(tmp_repo, "vendor")):
            exec(tmp_repo, ["go", "mod", "vendor"])
        exec(tmp_repo, ["go", "mod", "tidy"])

        maybe_skip_noop_change(tmp_repo, args.always_skip_if_no_change)

        exec(tmp_repo, ["git", "add", "--all"])
        commit_message = f"Upgrade {args.module_name} to {args.module_version}"
        exec(tmp_repo, ["git", "commit", "--message", commit_message])

        exec(tmp_repo, ["git", "push", "-u", "origin", branch_name])

        pr_title = (
            f"Upgrade {os.path.basename(args.module_name)} to {args.module_version}"
        )
        pr_body = f"""
        This PR was automatically created by [upgrade-go-module][1].

        [1]: https://github.com/peterstace/upgrade-go-module

        |                  |                           |
        | ---              | ---                       |
        | Upgraded module  | `{args.module_name}`      |
        | Current version  | `{current_version}`       |
        | Upgraded version | `{args.module_version}`   |
        | Reference        | {args.reference or "N/A"} |
        """
        pr_body = "\n".join(line.lstrip() for line in pr_body.splitlines())
        gh_args = ["gh", "pr", "create", "--body", pr_body, "--title", pr_title]
        if args.target_branch:
            gh_args.extend(["--base", args.target_branch])
        if args.draft:
            gh_args.append("--draft")
        p = subprocess.run(
            gh_args, cwd=tmp_repo, text=True, stdout=subprocess.PIPE, check=True
        )
        pr_url = p.stdout.splitlines()[-1]

        subprocess.run(["open", pr_url])

        print(f"{repo} upgrade complete")


def dependency_version(go_mod, module_dependency_name):
    """
    Extracts the version of the dependency from the go.mod file, or returns
    None if the go.mod doesn't have the given dependency.
    """
    dir = os.path.dirname(go_mod)
    args = ["go", "mod", "edit", "-json"]
    p = subprocess.run(args, cwd=dir, text=True, stdout=subprocess.PIPE)
    data = json.loads(p.stdout)
    require = data["Require"]
    if not require:
        return None
    for dep in require:
        if dep["Path"] == module_dependency_name:
            return dep["Version"]
    return None


def prompt_upgrade_repo(current_version, args):
    if args.upgrade_all:
        return
    msg = f"upgrade from {current_version} to {args.module_version}?"
    if not yes_no(msg):
        raise SkipRepo("user skipped")


def get_remote_url(repo):
    raw = exec(repo, ["git", "remote"])
    remotes = raw.splitlines()
    if len(remotes) == 0:
        raise Exception("no remotes")
    # TODO: There might be multiple remotes. Should we ask the user which one
    # they want?
    return remotes[0]


def exec(cwd, args):
    """
    Executes the command made by args inside cwd. Returns stdout.
    """
    proc = subprocess.run(args, cwd=cwd, text=True, check=True, stdout=subprocess.PIPE)
    return proc.stdout.rstrip("\n")


def maybe_skip_noop_change(repo, always_skip_if_no_change):
    args = ["git", "status", "--porcelain"]
    proc = subprocess.run(args, text=True, cwd=repo, check=True, stdout=subprocess.PIPE)

    ALLOWED = ("go.mod", "go.sum", "vendor/modules.txt")
    for line in proc.stdout.splitlines():
        if line not in (f" M {f}" for f in ALLOWED):
            return False

    if always_skip_if_no_change:
        raise SkipRepo("noop change (always skipped)")
    msg = f"Update in {repo} only changes {ALLOWED}. Upgrade anyway?"
    if not yes_no(msg):
        raise SkipRepo("noop change (user skipped)")


def yes_no(prompt):
    return fzf(prompt, ["yes", "no"]) == "yes"


def fzf(prompt, choices):
    if not prompt.endswith(" "):
        prompt = prompt + " "
    args = ["fzf", "--prompt", prompt, "--height", "~100%"]
    input = "\n".join(choices)
    p = subprocess.run(args, text=True, input=input, stdout=subprocess.PIPE, check=True)
    return p.stdout.strip()


if __name__ == "__main__":
    main()
